"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var t=e(require("inquirer")),s=e(require("fs-extra")),n=e(require("path"));const r=["[35m","[31m","[32m","[36m","[33m","[37m","[34m"],o=(e=>{process.stdout.write(`\n${r[6]}[Initializing]${r[3]} ${e}\n`);const t={removable:[],removed:0,projects:[],others:[],files:0,elapsed:[0,0],errors:[]};return{remove:e=>{t.removable=[...t.removable,e],process.stdout.write("[31m:")},project:e=>{process.stdout.write("[32m:"),t.projects=[...t.projects,e]},other:e=>{process.stdout.write("[34m:"),t.others=[...t.others,e]},filesScanned:e=>{t.files=t.files+e},result:()=>{t.removable.length?(process.stdout.write(r[0]+"          \n                                     :\n                        Scan results :    \n                                     :     "),t.removable.map(e=>{process.stdout.write(`\n${r[1]}[ > ] ${r[0]}${e.fileName} : ${r[3]} ${e.path}`)}),process.stdout.write(`\n\n${r[4]}[Found] run 'tidy up' to remove these files.`)):process.stdout.write(`\n${r[2]}[Clean]${r[3]} No removable file found.`),process.stdout.write(`${r[0]} \n\n\n                    files scanned : ${t.files} \n            removable files found : ${t.removable.length} \n                                   \n`)},report:()=>{const e=t.removable.length||0,s=t.projects.length||0,n=t.others.length||0,o=t.files||0,i=t.removed||0,a=t.errors.length||0,l=`${t.elapsed[0]}s and ${t.elapsed[1]/1e6}ms`;process.stdout.write(`${r[0]} \n                      TIDY REPORT :\n                                  :\n                    files scanned : ${o}\n            removable files found : ${e} \n                          removed : ${i} \n                   projects found : ${s} \n                           others : ${n} \n                           errors : ${a} \n                          elapsed : ${l}\n                                  \n\n                                  :\n                    end of report :    \n                                  \n         \n      \n`)},err:e=>{t.errors=[...t.errors,e],process.stdout.write(`${r[1]} can not access ${e}, `)},elapsed:e=>{t.elapsed=e},info:()=>({...t}),removed:e=>{t.removed=t.removed+e}}})("npx @neuralline/tidy"),i={"package.json":"isProjectDirectory",node_modules:"isDelete",".cache":"isDelete",".yarn":"isDelete",".pnp":"isDelete",".history":"isDelete",".vscode":"extra",".idea":"extra",".yarn-error.log":"extra",build:"extra",dist:"extra",Windows:"escape",Users:"escape"},a={scan:"scan",up:"up",delete:"up","--yes":"up",remove:"up",uninstall:"not implemented",install:"not implemented",help:"help","-h":"help",init:"init","--init":"init",i:"init",ignore:"ignore",list:"list",ls:"list",yes:"up",cache:"up",save:"save","-s":"save",log:"save",about:"info",clean:"up",info:"info","--":"help"},l=async e=>{const t=n.resolve(e),r=s.readdirSync(t)||[];if(r.length)return await Promise.allSettled(r.map(async e=>{try{const r=n.resolve(t,e);await(async(e,t)=>{const r=n.basename(e);let i="";try{if("isDelete"===t[r])return i=r,void await o.remove({path:e,fileName:r,reason:i});"isProjectDirectory"===t[r]?(i=r,await o.project({path:e,fileName:r,reason:i})):t[r]&&(i=r,o.other({path:e,fileName:r,reason:i})),s.lstatSync(e).isDirectory()&&"escape"!==t[r]&&await l(e)}catch(e){o.err(r)}return!0})(r,i)}catch(e){o.err(e)}})),o.filesScanned(r.length),!0},c=async(e,t)=>{if(!e)return!1;if(!s.existsSync(e))return!1;const n=process.hrtime();if(process.stdout.write(`\n${r[6]}[Scanning]${r[3]} Tidy Scanning files.\n`),await l(e),o.result(),process.stdout.write(`\n${r[2]}[Scanning]${r[3]} complete.`),t){process.stdout.write(`\n${r[6]}[Removing]${r[3]} Tidy Removing files.`);const{removable:e}=o.info();await(async e=>{try{await Promise.all(e.map(async e=>{await s.remove(e.path),await o.removed(1)}))}catch(e){return process.stdout.write("[31m        unsuccessful     :\n [37m"),o.err(e),!1}return!0})(e),process.stdout.write(`\n${r[2]}[Removing]${r[3]} complete.`)}return o.elapsed(process.hrtime(n)),o.report(),!0},d=async e=>{const t=new Set(e),s=process.cwd();return t.has("scan")?await c(s,!1):t.has("up")||t.has("clean")?await c(s,!0):(process.stdout.write("\n[32m    Printing help     [37m"),(()=>{const e=console.log;e("\n\n\n"),e("Usage: Tidy [scan, up, help]"),e(""),e("  description: deletes node_modules and cache files from your project directories."),e(""),e("Options:"),e(""),e("  -h, --help          Display this usage info"),e("  scan                Scan all my directories for matching files"),e("  up                  Tidy up, remove node_modules and cache files"),e("  uninstall           Same as Tidy up, delete files that matches the list"),e("  delete              Same as Tidy ups"),e("  remove              Same as Tidy ups"),e("  up                  Tidy up, remove all matching files"),e("  list, -ls           list cache files definitions"),e("  init, --init        Initialise Tidy. Not implemented"),e("  ignore              Ignore this directory and sub directories. Not implemented"),e("\n\n\n")})()),process.stdout.write("\n[32mâˆš TIDY DONE         \n"),!0};exports.cli=async e=>{const s=await(async e=>{process.on("unhandledRejection",e=>{console.error("@Tidy: I'm down, this time.... :",e),process.exit(1)}),process.stdout.write("[32m\n    \n      Neural Line\n      Neat and controlled.\n      T.I.D.Y ~/ËˆtÊŒÉªdi/\n      cli version 0.0.4 - 2020    \n     \n    \n");const s=new Set(e.slice(2).map(e=>a[e.toLowerCase()]));let n;return s.delete(void 0),s.size||(n=await t.prompt({type:"list",name:"tidy",message:"What do you want to do? ",choices:["scan","clean","help"]}),s.add(n.tidy)),[...s]})(e);return await d(s),!0};
