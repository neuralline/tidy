"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e={"package.json":"isProjectDirectory",node_modules:"isDelete",".cache":"isDelete",".yarn":"isDelete",".pnp":"isDelete",".history":"isDelete",".vscode":"extra",".idea":"extra",".yarn-error.log":"extra",".pnp.js":"extra",build:"extra",dist:"extra"},t=require("fs-extra"),s=require("path");const r=function(e){const t=["[35m","[31m","[32m","[36m","[33m","[37m"];process.stdout.write("\n[3m Initializing tidy state  [37m "+e);const s={removable:[],removed:0,projects:[],others:[],files:0,elapsed:[0,0],errors:[]},r=()=>{const e=s.removable.length||0,r=s.projects.length||0,n=s.others.length||0,i=s.files||0,o=s.removed||0,a=s.errors.length||0,l=`${s.elapsed[0]}s and ${s.elapsed[1]/1e6}ms`;process.stdout.write(`${t[0]} \n                      TIDY REPORT :\n                                  :\n                    files scanned : ${i}\n            removable files found : ${e} \n                          removed : ${o} \n                   projects found : ${r} \n                           others : ${n} \n                           errors : ${a} \n                          elapsed : ${l} \n         \n      \n`)};return{remove:e=>{s.removable=[...s.removable,e],process.stdout.write("[91m:")},project:e=>{process.stdout.write("[32m:"),s.projects=[...s.projects,e]},other:e=>{process.stdout.write("[37m:"),s.others=[...s.others,e]},filesScanned:e=>{s.files=s.files+e},result:()=>{r(),process.stdout.write(t[0]+"          \n                             TIDY :\n                     Scan results :    \n                                  :     "),s.removable.length?(s.removable.map(e=>{process.stdout.write(`\n${t[1]}[ > ] ${t[0]}${e.fileName} : ${t[3]} ${e.path}`)}),process.stdout.write(`\n\n${t[4]}[INFO]${t[5]} run 'tidy up' to remove these files.`)):process.stdout.write(`\n${t[2]}[CLEAN]${t[3]} No removable file found.`),process.stdout.write(t[0]+"         \n                                  :\n                          the end :    \n                                  :\n      \n")},report:r,err:e=>{s.errors=[...s.errors,e],process.stdout.write(t[1]+"   can not access  ")},elapsed:e=>{s.elapsed=e},info:()=>({...s}),removed:e=>{s.removed=s.removed+e}}}("npx @neuralline/tidy"),n=async i=>{const o=s.resolve(i),a=t.readdirSync(o)||[];return await Promise.all(a.map(async i=>{try{const a=s.resolve(o,i);await(async(e,i)=>{const o=s.basename(e);let a="";try{if("isDelete"===i[o])return a=o,void await r.remove({path:e,fileName:o,reason:a});"isProjectDirectory"===i[o]?(a=o,await r.project({path:e,fileName:o,reason:a})):i[o]&&(a=o,r.other({path:e,fileName:o,reason:a})),t.lstatSync(e).isDirectory()&&await n(e)}catch(e){r.err(e)}return!0})(a,e)}catch(e){r.err(e)}})),r.filesScanned(a.length),!0},i=async(e,s)=>{const i=process.hrtime();if(await n(e),s){const{removable:e}=r.info();await(async e=>{try{await Promise.allSettled(e.map(async e=>{await t.remove(e.path),await r.removed(1)}))}catch(e){return process.stdout.write("[31m        unsuccessful     :\n [37m"),r.err(e),!1}return!0})(e)}const o=process.hrtime(i);return await r.elapsed(o),r},o=require("listr"),a=async e=>{const t=new Set(e),s=process.cwd(),r=[];t.has("scan")?r.push({title:"Scanning directories",task:async()=>{(await i(s,!1)).result()},skip:()=>{}}):t.has("up")?r.push({title:"Removing files",task:async()=>{(await i(s,!0)).report()},skip:()=>{}}):r.push({title:"Help",task:async()=>{process.stdout.write("\n[32m    Printing help     [37m"),(()=>{const e=console.log;e("\n\n\n"),e("Usage: Tidy [scan, up, help]"),e(""),e("  description: deletes node_modules and cache files from your project directories."),e(""),e("Options:"),e(""),e("  -h, --help          Display this usage info"),e("  scan                Scan all my directories for matching files"),e("  up                  Tidy up, remove node_modules and cache files"),e("  uninstall           Same as Tidy up, delete files that matches the list"),e("  delete              Same as Tidy ups"),e("  remove              Same as Tidy ups"),e("  up                  Tidy up, remove all matching files"),e("  list, -ls           list cache files definitions"),e("  init, --init        Initialise Tidy. Not implemented"),e("  ignore              Ignore this directory and sub directories. Not implemented"),e("\n\n\n")})()},skip:()=>{}});const n=new o(r);return await n.run(),process.stdout.write("\n[32mâˆš TIDY DONE         \n"),!0},l=require("inquirer");exports.cli=async e=>{const t=await(async e=>{process.on("unhandledRejection",e=>{console.error("@Tidy: I'm down, this time.... :",e),process.exit(1)}),process.stdout.write("[32m\n    \n    Neural Line\n    Neat and controlled.\n    T.I.D.Y ~/ËˆtÊŒÉªdi/\n    cli version 0.0.1 - 2020    \n     \n    \n");const t={scan:"scan",up:"up",delete:"up","--yes":"up",remove:"up",uninstall:"up",help:"help","-h":"help",init:"init","--init":"init",i:"init",ignore:"ignore",list:"list",ls:"list",yes:"up",cache:"up",save:"save","-s":"save",log:"save","--":"help"},s=new Set(e.slice(2).map(e=>t[e]));s.delete(void 0);const r=[];let n;return s.has("up")||r.push({type:"list",name:"tidy",message:"What do you want to do? ",choices:["up","scan","help"]}),s.size||(n=await l.prompt(r),s.add(n.tidy)),[...s]})(e);return await a(t),!0};
